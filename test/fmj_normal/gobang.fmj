/*

X: 88
O: 79
space: 32
\n: 10
.: 46
|:124
+:43
-:45

*/

public int main() {
  class ChessBoard chessboard;
  chessboard.run();
  return 0;
}

public class Math{
  public int mod(int a,int b){
    return a-a/b*b;
  }
  public int wait(int t){
    int i=0;
    int end;
    end=100*100*100*t;

    while(i<end)i=i+1;
    return 0;
  }
  public int dec2hex(int x){
    if(x<10) return 48+x;
    else return 55+x;
  }
  public int hex2dec(int x){
    if(x>=48&&x<=57)return x-48;
    if(x>=65&&x<=70)return x-55;
    return -1;
  }
}

public class ConsoleOp{
  public int putSP(){
    putch(32);
    return 0;
  }
  public int putLF(){
    putch(10);
    return 0;
  }
  public int removeLine(){
    putch(13); // '\r'
    putch(27); // '\033'
    putch(91); // '['
    putch(65); // 'A'
    return 0;
  }
  public int getchar(){
    int c;
    c=getch();
    while(c==32||c==10)c=getch();
    return c;
  }
}

public class Game{
  public int init(){return 0;}
  public int mainLoop(){return 0;}
  public int clear(){return 0;}
  public int run(){
    this.init();
    while(!this.mainLoop());
    this.clear();
    return 0;
  }
}

public class ChessBoard extends Game{
  class ConsoleOp console;
  class Math math;
  int[225] chessboard;
  int totalRow=15;
  int totalCol=15;

  int turn;

  public int mainLoop(){
    int r;int c;

    this.printBoard();
    this.printHint();

    r=this.console.getchar();
    c=this.console.getchar();
    r=this.math.hex2dec(r);
    c=this.math.hex2dec(c);
    if(!(r>=0&&r<this.totalRow&&c>=0&&c<=this.totalCol))return false;
    this.update(r,c);
    
    if(this.checkwin(r,c))return true;
    return false;
  }

  public int init(){
    class Math math;
    class ConsoleOp console;
    int i=0;

    this.console=console;
    this.math=math;
    this.turn=0;
    
    while(i<this.totalRow*this.totalCol){
      this.chessboard[i]=46;
      i=i+1;
    }
    return 0;
  }

  public int clear(){
    this.printBoard();
    this.turn=1-this.turn;
    this.printWin();
    return 0;
  }

  public int update(int r,int c){
    if(this.chessboard[r*this.totalCol+c]==46){
      this.chessboard[r*this.totalCol+c]=this.getCurChess();
      this.turn=1-this.turn;
    }
    return 0;
  }

  public int checkwin(int r,int c){
    int i;
    int j;
    int nexti;
    int nextj;
    int I=0;
    int cnt;
    int chess;
    int[] dir={0,1,1,0,1,1,1,-1};

    chess=this.chessboard[r*this.totalCol+c];

    while(I<4){
      cnt=1;

      i=r;
      j=c;
      nexti=i+dir[I*2];
      nextj=j+dir[I*2+1];
      while(nexti>=0&&nexti<this.totalRow&&nextj>=0&&nextj<this.totalCol&&this.chessboard[nexti*this.totalCol+nextj]==chess){
        i=nexti;
        j=nextj;
        nexti=i+dir[I*2];
        nextj=j+dir[I*2+1];
        cnt=cnt+1;
      }

      i=r;
      j=c;
      nexti=i-dir[I*2];
      nextj=j-dir[I*2+1];
      while(nexti>=0&&nexti<this.totalRow&&nextj>=0&&nextj<this.totalCol&&this.chessboard[nexti*this.totalCol+nextj]==chess){
        i=nexti;
        j=nextj;
        nexti=i-dir[I*2];
        nextj=j-dir[I*2+1];
        cnt=cnt+1;
      }

      if(cnt>=5)return true;
      I=I+1;
    }
    return false;
  }

  public int printDivider(){
    int i;

    this.console.putSP();
    this.console.putSP();
    putch(43);
    i=0;
    while(i<this.totalCol){
      putch(45);
      putch(45);
      i=i+1;
    }
    putch(45);
    putch(43);
    this.console.putLF();

    return 0;
  }

  public int getCurChess(){
    if(this.turn==0)return 88;
    else return 79;
  }

  public int printHint(){
    /*putch(80);putch(108);putch(101);putch(97);putch(115);putch(101);
    putch(32);
    putch(101);putch(110);putch(116);putch(101);putch(114);
    putch(32);
    putch(121);putch(111);putch(117);putch(114);
    putch(32);
    putch(99);putch(104);putch(101);putch(115);putch(115);
    putch(40);putch(this.getCurChess());putch(41);
    putch(32);
    putch(112);putch(111);putch(115);putch(105);putch(116);putch(105);putch(111);putch(110);
    putch(40);
    putch(91);putch(114);putch(111);putch(119);putch(93);
    putch(32);
    putch(91);putch(99);putch(111);putch(108);putch(117);putch(109);putch(110);putch(93);
    putch(41);
    putch(58);
    putch(10);*/

    putch(73); putch(116); putch(39); putch(115);
    putch(32);  
    putch(this.getCurChess());
    putch(39);  
    putch(115); 
    putch(32);  
    putch(116); putch(117); putch(114); putch(110); 
    putch(58);  
    putch(10);
    return 0;
  }

  public int printBoard(){
    int i;
    int j;

    this.console.putSP();
    this.console.putSP();
    this.console.putSP();
    this.console.putSP();
    i=0;
    while(i<this.totalCol){
      putch(this.math.dec2hex(i));
      this.console.putSP();
      i=i+1;
    }
    this.console.putLF();

    this.printDivider();

    i=0;
    while(i<this.totalRow){

      putch(this.math.dec2hex(i));
      this.console.putSP();
      putch(124);
      this.console.putSP();

      j=0;
      while(j<this.totalCol){
        putch(this.chessboard[i*this.totalCol+j]);
        this.console.putSP();
        j=j+1;
      }
      putch(124);
      this.console.putLF();
      i=i+1;
    }

    this.printDivider();

    return 0;
  }

  public int printWin(){
    //putch(80);putch(108);putch(97);putch(121);putch(101);putch(114);  // Player
    putch(this.getCurChess()); // X
    putch(32);  
    putch(119);putch(105);putch(110); // win
    putch(32);  
    putch(116);putch(104);putch(101); //the
    putch(32); 
    putch(103);putch(97);putch(109);putch(101);// game
    putch(46);// .
    putch(10);
    return 0;
  }

}